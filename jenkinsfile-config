// Definitions here

def IS_BRANCH_BEHIND = ""

pipeline {

    agent any




    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH', description: 'This parameter specifies which branch must be built'
        booleanParam(name: 'MERGE_TO_MASTER', defaultValue: false, description: 'This parameter specifies if the merge to master must be performed')
        booleanParam(name: 'TO_PRODUCTION', defaultValue: false, description: 'This parameter specifies if the build result must be published')
    }

    triggers {
        parameterizedCron('''
            H/30 18 * * * %BRANCH=feature1
            H/45 20 * * * %BRANCH=feature2
        ''')
    }




    stages {

        stage('Slack - Notify Start Build'){
                steps {
                     slackSend channel: '#builds',
                     message: "Started ${env.JOB_NAME} with build #${BUILD_NUMBER}"
                }
            }

        stage('Clean Project') {
            steps {
                sh './gradlew clean'
            }
        }

        stage('Git - Check conflicts'){
            when {
                expression { params.MERGE_TO_MASTER && params.BRANCH != "master" }
            }
            steps {
                sh "git branch"
                sh "git checkout origin/${params.BRANCH}"
                sh "git branch"
                sh "git status -sb --ahead-behind"
                sh "git rev-list --left-only --count origin/master...origin/${params.BRANCH}"
                IS_BRANCH_BEHIND = sh(returnStdout: true, script: "git rev-list --left-only --count origin/master..origin/${params.BRANCH}").trim()
                echo "My variable is ${IS_BRANCH_BEHIND}"
                //sh "git merge origin/master"
                //sh "git push origin HEAD:${params.BRANCH}"
            }

        }

        stage('Gradle Build') {
            steps {
                sh './gradlew build'
            }
        }



        stage('Gradle - Generate Coverage Report') {
            steps {
                sh './gradlew jacocoTestReport'
            }
        }




        stage('SonarQube Analysis') {
            steps {
                  withSonarQubeEnv(installationName: 'sonarqube', credentialsId: 'sonarqube_integration') {
                    sh './gradlew sonarqube'
                  }
            }
        }

        stage('Manual Approval - Merge to Master?'){
            when {
                expression { params.MERGE_TO_MASTER }
            }
            steps {
                input message: "Perform merge?"
            }
        }



        stage('Git - Merge to Master'){
            when {
                expression { params.MERGE_TO_MASTER && params.BRANCH != "master" }
            }
            steps {
                echo "${params.BRANCH}"
                sh "git checkout origin/master"
                sh "git merge origin/${params.BRANCH}"
                sh "git push origin HEAD:master"
            }

        }


        stage('Manual Approval - Deploy to production?'){
            when {
                expression { params.TO_PRODUCTION }
            }
            steps {
                input message: "Deploy to prod?"
            }
        }


        stage('Publish to App Center') {
            when {
                expression { params.TO_PRODUCTION }
            }
            steps {
                appCenter apiToken: 'f1e91523c76ccd9caa11a3e5894f78efc72bcdf9',
                        appName: 'FunCalc',
                        distributionGroups: 'testers',
                        ownerName: 'mfresco95-gmail.com',
                        pathToApp: 'app/build/outputs/apk/debug/app-debug.apk'
            }
        }







    }

    post{

        always{
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false,
                         reportDir: 'app/build/reports/tests/testReleaseUnitTest', reportFiles: 'index.html',
                         reportName: 'Tests Report', reportTitles: ''])

            emailext body: 'A Test EMail', recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: 'Test'

            /*

            jiraNewIssue issue: testIssue, site: 'mfresco_site';


            junit (
                    testResults: 'app/build/test-results/testReleaseUnitTest/*.xml',
                    testDataPublishers: [
                            jiraTestResultReporter(
                                    configs: [
                                            jiraStringField(fieldKey: 'summary', value: 'Summary_Test'),
                                            jiraStringField(fieldKey: 'description', value: 'Description_Test'),
                                    ],
                                    projectKey: 'FUNCALC',
                                    issueType: '1',
                                    autoRaiseIssue: false,
                                    autoResolveIssue: false,
                                    autoUnlinkIssue: false,
                            )
                    ]
            )


             */

        }

        success{
                slackSend channel: '#builds',
                message: "${env.JOB_NAME} - #${BUILD_NUMBER} finished with status: *${currentBuild.currentResult}*.",
                color: 'good'
        }
        failure{
                slackSend channel: '#builds',
                message: "${env.JOB_NAME} - #${BUILD_NUMBER} finished with status: *${currentBuild.currentResult}*.",
                color: 'danger'


        }


    }


}
