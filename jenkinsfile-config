// Definitions here

pipeline {

// Set up local variables for your pipeline
    environment {
        // test variable: 0=success, 1=fail; must be string
        doError = '0'
        BUILD_USER = ''
    }

    agent any

    stages {

        stage('Slack - Notify Start Build'){
                steps {
                     slackSend channel: '#builds',
                     message: "Started ${env.JOB_NAME} with build #${BUILD_NUMBER}"
                }
            }

        stage('Gradle Build') {
            steps {
                sh './gradlew build'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                  withSonarQubeEnv(installationName: 'sonarqube', credentialsId: 'sonarqube_integration') {
                    sh './gradlew sonarqube'
                  }
            }
        }

        stage('Manual Approval - To Deploy?'){
            steps {
                input message: "Deploy to prod?"
            }

        }



        stage('Git - Merge to Master'){
            steps {
                sh "git checkout origin/master"
                sh "git merge origin/feature1"
                sh "git push origin HEAD:master"
            }

        }

        /*

        stage('Publish to App Center') {
                    steps {
                        appCenter apiToken: 'f1e91523c76ccd9caa11a3e5894f78efc72bcdf9',
                        appName: 'FunCalc',
                        distributionGroups: 'testers',
                        ownerName: 'mfresco95-gmail.com',
                        pathToApp: 'app/build/outputs/apk/debug/app-debug.apk'
                    }
                }


         */


    }

    post{

        success{
                slackSend channel: '#builds',
                message: "${env.JOB_NAME} - #${BUILD_NUMBER} finished with status: *${currentBuild.currentResult}*.",
                color: 'good'
        }
        failure{
                slackSend channel: '#builds',
                message: "${env.JOB_NAME} - #${BUILD_NUMBER} finished with status: *${currentBuild.currentResult}*.",
                color: 'danger'
        }


    }


}
